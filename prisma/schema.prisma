generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// TODO:
// -> Add image support

model PriceHistory {
  pid        String   @id @default(uuid()) /// Price Entry ID
  created_at DateTime @default(now()) /// Created At

  post    Post    @relation(fields: [postPid], references: [id])
  postPid String
  price   Float
  eur     Boolean

  //   author   User   @relation("CreatedBy", fields: [authorId], references: [uid])
  // authorId String
}

model User {
  uid           String  @id @default(uuid())
  firstName     String
  lastName      String
  email         String  @unique
  username      String  @unique
  passwordHash  String
  userAuthToken String  @unique

  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  role         Role        @default(USER)
  account_type AccountType @default(Personal)

  profilePicture String?

  sellerInfo SellerInformation?

  posts Post[] @relation("CreatedBy")
  likes Post[] @relation("PostLikes")
  views Post[] @relation("PostViews")
}

model SellerInformation {
  bid     String @id @default(uuid())
  user    User   @relation(fields: [userUid], references: [uid])
  userUid String @unique

  status SellerStatus @default(Normal)

  coverPicture String?

  mainColor String?
}

/// Post Model - Contains all information on a post made on the page
model Post {
  id         String   @id @default(uuid()) /// Post ID
  created_at DateTime @default(now()) /// Created At
  archived   Boolean  @default(false) /// If post is archived

  // link post to one Author Only
  author   User   @relation("CreatedBy", fields: [authorId], references: [uid])
  authorId String

  title       String
  description String

  // Array of Price Entries
  // -> Can be used to calculate discounts based on last change 24 Hours
  // -> Could be Premium Feature - View Price History ...
  priceHistory PriceHistory[]

  category String
  city     Cities
  country  Countries

  tags Tag[]

  postViews User[] @relation("PostViews") // Array of Users who have viewed the Post
  postLikes User[] @relation("PostLikes") // Array of Users who have liked the Post 
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  value String
  posts Post[]
}

// ?ENUM DECLARATION
// -----------------------------------------

enum Role {
  USER
  ADMIN
}

enum AccountType {
  Personal
  Seller
}

enum SellerStatus {
  Normal
  Verified
}

enum Countries {
  Albania
  Kosovo
}

enum Cities {
  // * 1 DONE
  // Shkoder
  Shkoder
  // Puke
  Puke

  // * 2 DONE
  // Tropoje
  BajramCurri
  // Kukes
  Kukes
  // Has
  Krume

  // * 3 DONE
  // Lezhe
  Lezhe
  Shengjin
  // Mirdite
  Rreshen
  // Kurbin
  Lac
  Mamurras

  // * 4
  // DIBER:
  // Peshkopi
  Peshkopi
  // Mat
  Burrel
  // Bulqize
  Bulqize

  // * 5 DONE
  // Durres
  Durres
  Shijak
  Sukth
  // Kruje
  FusheKruje
  Kruje

  // * 6
  // Tirane
  Tirane
  // Kavaje
  Kavaje
  // Rrogozhine
  Rrogozhine
  // Kamez
  Kamez

  // * 7
  // Elbasan
  Elbasan
  Belsh
  // Kucove
  Kucove
  // Librazhd
  Librazhd
  // Peqin
  Peqin
  // Gramsh
  Gramsh
  // Cerrik
  Cerrik
  // Prrenjas
  Prrenjas

  // * 8 DONE
  // Fier
  Fier
  // Lushnje
  Lushnje
  // Mallakaster
  Ballsh
  // Divjake
  Divjake
  // Patos
  Patos
  // Roskovec
  Roskovec

  // * 9 DONE
  // Berat
  Berat
  // Skrapar
  Corovode

  // * 10 DONE
  // Korce
  Korce
  // Pogradec
  Pogradec
  // Devoll
  Bilisht
  // Erseke
  Erseke
  // Maliq
  Libonik

  // * 11 DONE
  // Vlore
  Vlore
  // Delvine
  Delvine
  // Sarande
  Sarande

  // * 12
  // Gjirokaster
  Gjirokaster
  // Permet
  Permet
  // Tepelene
  Tepelene
}
